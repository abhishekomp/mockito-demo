package org.abhishek.hamcrest_matchers;

import org.hamcrest.Description;
import org.hamcrest.TypeSafeMatcher;

public class CustomIntegerMatcher extends TypeSafeMatcher<Integer> {
    // Step 1. Extend the class called TypeSafeMatcher<T>
    // Step 2. Implement the matcher rules (conditions)
    // Step 3. Create the static method. The method will return the object of the custom matcher

    // Step 4. Use the matcher in the test class
    // Step 5. Run the test class to see the result
    // Step 6. If the test fails, check the error message to understand why it failed.
    // Step 7. Fix the issue in the matcher or the test class as needed.
    // Step 8. Repeat the process until the test passes.
    // Step 9. Once the test passes, you can use the custom matcher in your test cases.
    // Step 10. You can also create more complex matchers by combining existing matchers
    // or by implementing additional logic in the `matchesSafely` method.

    @Override
    protected boolean matchesSafely(Integer integer) {
        return integer % 2 == 0;
    }

    @Override
    public void describeTo(Description description) {
        description.appendText("an even number");
    }

    public static CustomIntegerMatcher isEven() {
        return new CustomIntegerMatcher();
    }







    // The following is generated by GitHub Copilot
    //To create a custom matcher, you need to implement the Matcher interface
    // and override its methods to define the matching logic.
    // You can also extend existing matchers to create more complex matchers.
    // For example, you can create a custom matcher that checks if an integer is even.
    // This is a simple example of a custom matcher for integers.
    // The matcher checks if the integer is even.
    // You can use this matcher in your tests to assert that an integer is even.
    // To use this matcher, you would typically create a new class that extends
    // the `TypeSafeMatcher` class and implement the required methods.
    // Here's an example of a custom matcher for integers:
    // public class IsEvenMatcher extends TypeSafeMatcher<Integer> {
    //     @Override
    //     public void describeTo(Description description) {
    //         description.appendText("an even number");
    //     }
    //
    //     @Override
    //     protected boolean matchesSafely(Integer item) {
    //         return item % 2 == 0;
    //     }
    //
    //     @Override
    //     protected void describeMismatchSafely(Integer item, Description mismatchDescription) {
    //         mismatchDescription.appendText("was ").appendValue(item);
    //     }
    // }
    // You can then use this matcher in your tests like this:
    // assertThat(4, isEven());
    // assertThat(5, isEven()); // This will fail the test
    // You can also create more complex matchers by combining existing matchers
    // or by implementing additional logic in the `matchesSafely` method.
    // For example, you can create a matcher that checks if an integer is within a certain range.
    // This is a simple example of a custom matcher for integers.

}
